"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

/**
 *
 * BINARY and APPLIED ON a AND b
 *
 * Meaningful only when r is a power of 2.
 *
 * |a| = |b| = |c| > 0
 *
 *
 */

var and = exports.and = function and(a, a0, b, b0, c, c0, c1) {

  while (c0 < c1) {
    c[c0++] = a[a0++] & b[b0++];
  }
};

/**
 * BIG ENDIAN BINARY and APPLIED ON a AND b
 *
 * Meaningful only when r is a power of 2.
 *
 * |a| >= |b| > 0
 *
 * treats b as if it was represented with the same number of blocks as a
 */

var band_t = exports.band_t = function band_t(r) {

  var _r = r / 2;

  return function (a, a0, a1, b, b0, b1, c, c0, c1) {

    var at = a1 - b1 + b0;
    var ct = c0 + at - a0;

    if (b[b0] < _r) while (c0 < ct) {
      c[c0++] = 0;
    } else while (c0 < ct) {
      c[c0++] = a[a0++];
    }while (c0 < c1) {
      c[c0++] = a[at++] & b[b0++];
    }
  };
};

/**
 * LITTLE ENDIAN BINARY and APPLIED ON a AND b
 *
 * Meaningful only when r is a power of 2.
 *
 * |a| >= |b| > 0
 *
 * treats b as if it was represented with the same number of blocks as a
 */

var land_t = exports.land_t = function land_t(r) {

  var _r = r / 2;

  return function (a, a0, a1, b, b0, b1, c, c0, c1) {

    var ct = c0 + b1 - b0;

    while (c0 < ct) {
      c[c0++] = a[a0++] & b[b0++];
    }if (b[b0 - 1] < _r) while (c0 < c1) {
      c[c0++] = 0;
    } else while (c0 < c1) {
      c[c0++] = a[a0++];
    }
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy8wLWxlZ2FjeS9iaW5hcnkvYW5kL2FuZC5qcyJdLCJuYW1lcyI6WyJhbmQiLCJhIiwiYTAiLCJiIiwiYjAiLCJjIiwiYzAiLCJjMSIsImJhbmRfdCIsInIiLCJfciIsImExIiwiYjEiLCJhdCIsImN0IiwibGFuZF90Il0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFDQTs7Ozs7Ozs7Ozs7QUFXTyxJQUFNQSxvQkFBTSxTQUFOQSxHQUFNLENBQVVDLENBQVYsRUFBYUMsRUFBYixFQUFpQkMsQ0FBakIsRUFBb0JDLEVBQXBCLEVBQXdCQyxDQUF4QixFQUEyQkMsRUFBM0IsRUFBK0JDLEVBQS9CLEVBQW1DOztBQUVyRCxTQUFPRCxLQUFLQyxFQUFaO0FBQWdCRixNQUFFQyxJQUFGLElBQVVMLEVBQUVDLElBQUYsSUFBVUMsRUFBRUMsSUFBRixDQUFwQjtBQUFoQjtBQUVBLENBSk07O0FBT1A7Ozs7Ozs7Ozs7QUFVTyxJQUFNSSwwQkFBUyxTQUFUQSxNQUFTLENBQVNDLENBQVQsRUFBVzs7QUFFaEMsTUFBSUMsS0FBS0QsSUFBSSxDQUFiOztBQUVBLFNBQU8sVUFBVVIsQ0FBVixFQUFhQyxFQUFiLEVBQWlCUyxFQUFqQixFQUFxQlIsQ0FBckIsRUFBd0JDLEVBQXhCLEVBQTRCUSxFQUE1QixFQUFnQ1AsQ0FBaEMsRUFBbUNDLEVBQW5DLEVBQXVDQyxFQUF2QyxFQUEyQzs7QUFFakQsUUFBSU0sS0FBS0YsS0FBS0MsRUFBTCxHQUFVUixFQUFuQjtBQUNBLFFBQUlVLEtBQUtSLEtBQUtPLEVBQUwsR0FBVVgsRUFBbkI7O0FBRUEsUUFBSUMsRUFBRUMsRUFBRixJQUFRTSxFQUFaLEVBQWdCLE9BQU9KLEtBQUtRLEVBQVo7QUFBZ0JULFFBQUVDLElBQUYsSUFBVSxDQUFWO0FBQWhCLEtBQWhCLE1BQ2dCLE9BQU9BLEtBQUtRLEVBQVo7QUFBZ0JULFFBQUVDLElBQUYsSUFBVUwsRUFBRUMsSUFBRixDQUFWO0FBQWhCLEtBRWhCLE9BQU9JLEtBQUtDLEVBQVo7QUFBZ0JGLFFBQUVDLElBQUYsSUFBVUwsRUFBRVksSUFBRixJQUFVVixFQUFFQyxJQUFGLENBQXBCO0FBQWhCO0FBRUEsR0FWRDtBQVlBLENBaEJNOztBQXFCUDs7Ozs7Ozs7OztBQVVPLElBQU1XLDBCQUFTLFNBQVRBLE1BQVMsQ0FBU04sQ0FBVCxFQUFXOztBQUVoQyxNQUFJQyxLQUFLRCxJQUFJLENBQWI7O0FBRUEsU0FBTyxVQUFVUixDQUFWLEVBQWFDLEVBQWIsRUFBaUJTLEVBQWpCLEVBQXFCUixDQUFyQixFQUF3QkMsRUFBeEIsRUFBNEJRLEVBQTVCLEVBQWdDUCxDQUFoQyxFQUFtQ0MsRUFBbkMsRUFBdUNDLEVBQXZDLEVBQTJDOztBQUVqRCxRQUFJTyxLQUFLUixLQUFLTSxFQUFMLEdBQVVSLEVBQW5COztBQUVBLFdBQU9FLEtBQUtRLEVBQVo7QUFBZ0JULFFBQUVDLElBQUYsSUFBVUwsRUFBRUMsSUFBRixJQUFVQyxFQUFFQyxJQUFGLENBQXBCO0FBQWhCLEtBRUEsSUFBSUQsRUFBRUMsS0FBSyxDQUFQLElBQVlNLEVBQWhCLEVBQW9CLE9BQU9KLEtBQUtDLEVBQVo7QUFBZ0JGLFFBQUVDLElBQUYsSUFBVSxDQUFWO0FBQWhCLEtBQXBCLE1BQ29CLE9BQU9BLEtBQUtDLEVBQVo7QUFBZ0JGLFFBQUVDLElBQUYsSUFBVUwsRUFBRUMsSUFBRixDQUFWO0FBQWhCO0FBR3BCLEdBVkQ7QUFZQSxDQWhCTSIsImZpbGUiOiJhbmQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbi8qKlxuICpcbiAqIEJJTkFSWSBhbmQgQVBQTElFRCBPTiBhIEFORCBiXG4gKlxuICogTWVhbmluZ2Z1bCBvbmx5IHdoZW4gciBpcyBhIHBvd2VyIG9mIDIuXG4gKlxuICogfGF8ID0gfGJ8ID0gfGN8ID4gMFxuICpcbiAqXG4gKi9cblxuZXhwb3J0IGNvbnN0IGFuZCA9IGZ1bmN0aW9uIChhLCBhMCwgYiwgYjAsIGMsIGMwLCBjMSkge1xuXG5cdHdoaWxlIChjMCA8IGMxKSBjW2MwKytdID0gYVthMCsrXSAmIGJbYjArK107XG5cbn07XG5cblxuLyoqXG4gKiBCSUcgRU5ESUFOIEJJTkFSWSBhbmQgQVBQTElFRCBPTiBhIEFORCBiXG4gKlxuICogTWVhbmluZ2Z1bCBvbmx5IHdoZW4gciBpcyBhIHBvd2VyIG9mIDIuXG4gKlxuICogfGF8ID49IHxifCA+IDBcbiAqXG4gKiB0cmVhdHMgYiBhcyBpZiBpdCB3YXMgcmVwcmVzZW50ZWQgd2l0aCB0aGUgc2FtZSBudW1iZXIgb2YgYmxvY2tzIGFzIGFcbiAqL1xuXG5leHBvcnQgY29uc3QgYmFuZF90ID0gZnVuY3Rpb24ocil7XG5cblx0dmFyIF9yID0gciAvIDI7XG5cblx0cmV0dXJuIGZ1bmN0aW9uIChhLCBhMCwgYTEsIGIsIGIwLCBiMSwgYywgYzAsIGMxKSB7XG5cblx0XHR2YXIgYXQgPSBhMSAtIGIxICsgYjA7XG5cdFx0dmFyIGN0ID0gYzAgKyBhdCAtIGEwO1xuXG5cdFx0aWYgKGJbYjBdIDwgX3IpIHdoaWxlIChjMCA8IGN0KSBjW2MwKytdID0gMDtcblx0XHRlbHNlICAgICAgICAgICAgd2hpbGUgKGMwIDwgY3QpIGNbYzArK10gPSBhW2EwKytdO1xuXG5cdFx0d2hpbGUgKGMwIDwgYzEpIGNbYzArK10gPSBhW2F0KytdICYgYltiMCsrXTtcblxuXHR9O1xuXG59O1xuXG5cblxuXG4vKipcbiAqIExJVFRMRSBFTkRJQU4gQklOQVJZIGFuZCBBUFBMSUVEIE9OIGEgQU5EIGJcbiAqXG4gKiBNZWFuaW5nZnVsIG9ubHkgd2hlbiByIGlzIGEgcG93ZXIgb2YgMi5cbiAqXG4gKiB8YXwgPj0gfGJ8ID4gMFxuICpcbiAqIHRyZWF0cyBiIGFzIGlmIGl0IHdhcyByZXByZXNlbnRlZCB3aXRoIHRoZSBzYW1lIG51bWJlciBvZiBibG9ja3MgYXMgYVxuICovXG5cbmV4cG9ydCBjb25zdCBsYW5kX3QgPSBmdW5jdGlvbihyKXtcblxuXHR2YXIgX3IgPSByIC8gMjtcblxuXHRyZXR1cm4gZnVuY3Rpb24gKGEsIGEwLCBhMSwgYiwgYjAsIGIxLCBjLCBjMCwgYzEpIHtcblxuXHRcdHZhciBjdCA9IGMwICsgYjEgLSBiMDtcblxuXHRcdHdoaWxlIChjMCA8IGN0KSBjW2MwKytdID0gYVthMCsrXSAmIGJbYjArK107XG5cblx0XHRpZiAoYltiMCAtIDFdIDwgX3IpIHdoaWxlIChjMCA8IGMxKSBjW2MwKytdID0gMDtcblx0XHRlbHNlICAgICAgICAgICAgICAgIHdoaWxlIChjMCA8IGMxKSBjW2MwKytdID0gYVthMCsrXTtcblxuXG5cdH07XG5cbn07XG4iXX0=