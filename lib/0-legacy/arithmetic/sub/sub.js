"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.bsub_t = bsub_t;
exports.lsub_t = lsub_t;

/**
 * @param {int} r base (radix)
 */
function bsub_t(r) {

	/**
  * Subtracts two big endian arrays, k >= i >= j
  * wraps
  *
  * @param {array} a first operand
  * @param {int} ai a left
  * @param {int} aj a right
  * @param {array} b second operand
  * @param {int} bi b left
  * @param {int} bj b right
  * @param {array} c result, must be 0 initialized
  * @param {int} ci c left
  * @param {int} cj c right
  */

	return function (a, ai, aj, b, bi, bj, c, ci, cj) {
		var T,
		    C = 0;

		while (--bj >= bi) {
			--aj;--cj;
			T = C;
			C = a[aj] < b[bj] + T;
			c[cj] = a[aj] - b[bj] + (C * r - T);
		}

		while (--aj >= ai) {
			--cj;
			T = C;
			C = a[aj] < T;
			c[cj] = a[aj] + (C * r - T);
		}

		if (C) {
			while (--cj >= ci) {
				c[cj] = r - 1;
			}
		}
	};
}

/**
 * @param {int} r base (radix)
 */
function lsub_t(r) {

	/**
  * Subtracts two little endian arrays, k >= i >= j
  * wraps
  *
  * @param {array} a first operand
  * @param {int} ai a left
  * @param {int} aj a right
  * @param {array} b second operand
  * @param {int} bi b left
  * @param {int} bj b right
  * @param {array} c result, must be 0 initialized
  * @param {int} ci c left
  * @param {int} cj c right
  */

	return function (a, ai, aj, b, bi, bj, c, ci, cj) {
		var T,
		    C = 0;

		while (bi < bj) {
			T = C;
			C = a[ai] < b[bi] + T;
			c[ci] = a[ai] - b[bi] + (C * r - T);
			++ai;++bi;++ci;
		}

		while (ai < aj) {
			T = C;
			C = a[ai] < T;
			c[ci] = a[ai] + (C * r - T);
			++ai;++ci;
		}

		if (C) {
			while (ci < cj) {
				c[ci] = r - 1;
				++ci;
			}
		}
	};
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy8wLWxlZ2FjeS9hcml0aG1ldGljL3N1Yi9zdWIuanMiXSwibmFtZXMiOlsiYnN1Yl90IiwibHN1Yl90IiwiciIsImEiLCJhaSIsImFqIiwiYiIsImJpIiwiYmoiLCJjIiwiY2kiLCJjaiIsIlQiLCJDIl0sIm1hcHBpbmdzIjoiOzs7OztRQUlnQkEsTSxHQUFBQSxNO1FBK0NBQyxNLEdBQUFBLE07O0FBbERoQjs7O0FBR08sU0FBU0QsTUFBVCxDQUFpQkUsQ0FBakIsRUFBbUI7O0FBRXpCOzs7Ozs7Ozs7Ozs7Ozs7QUFlQSxRQUFPLFVBQVNDLENBQVQsRUFBWUMsRUFBWixFQUFnQkMsRUFBaEIsRUFBb0JDLENBQXBCLEVBQXVCQyxFQUF2QixFQUEyQkMsRUFBM0IsRUFBK0JDLENBQS9CLEVBQWtDQyxFQUFsQyxFQUFzQ0MsRUFBdEMsRUFBeUM7QUFDL0MsTUFBSUMsQ0FBSjtBQUFBLE1BQU9DLElBQUksQ0FBWDs7QUFFQSxTQUFNLEVBQUVMLEVBQUYsSUFBUUQsRUFBZCxFQUFpQjtBQUNoQixLQUFFRixFQUFGLENBQU0sRUFBRU0sRUFBRjtBQUNOQyxPQUFJQyxDQUFKO0FBQ0FBLE9BQUlWLEVBQUVFLEVBQUYsSUFBUUMsRUFBRUUsRUFBRixJQUFRSSxDQUFwQjtBQUNBSCxLQUFFRSxFQUFGLElBQVFSLEVBQUVFLEVBQUYsSUFBUUMsRUFBRUUsRUFBRixDQUFSLElBQWlCSyxJQUFFWCxDQUFGLEdBQU1VLENBQXZCLENBQVI7QUFDQTs7QUFFRCxTQUFNLEVBQUVQLEVBQUYsSUFBUUQsRUFBZCxFQUFpQjtBQUNoQixLQUFFTyxFQUFGO0FBQ0FDLE9BQUlDLENBQUo7QUFDQUEsT0FBSVYsRUFBRUUsRUFBRixJQUFRTyxDQUFaO0FBQ0FILEtBQUVFLEVBQUYsSUFBUVIsRUFBRUUsRUFBRixLQUFTUSxJQUFFWCxDQUFGLEdBQU1VLENBQWYsQ0FBUjtBQUNBOztBQUVELE1BQUdDLENBQUgsRUFBSztBQUNKLFVBQU0sRUFBRUYsRUFBRixJQUFRRCxFQUFkLEVBQWlCO0FBQ2hCRCxNQUFFRSxFQUFGLElBQVFULElBQUksQ0FBWjtBQUNBO0FBQ0Q7QUFFRCxFQXZCRDtBQXdCQTs7QUFHRDs7O0FBR08sU0FBU0QsTUFBVCxDQUFpQkMsQ0FBakIsRUFBbUI7O0FBRXpCOzs7Ozs7Ozs7Ozs7Ozs7QUFlQSxRQUFPLFVBQVNDLENBQVQsRUFBWUMsRUFBWixFQUFnQkMsRUFBaEIsRUFBb0JDLENBQXBCLEVBQXVCQyxFQUF2QixFQUEyQkMsRUFBM0IsRUFBK0JDLENBQS9CLEVBQWtDQyxFQUFsQyxFQUFzQ0MsRUFBdEMsRUFBeUM7QUFDL0MsTUFBSUMsQ0FBSjtBQUFBLE1BQU9DLElBQUksQ0FBWDs7QUFFQSxTQUFNTixLQUFLQyxFQUFYLEVBQWM7QUFDYkksT0FBSUMsQ0FBSjtBQUNBQSxPQUFJVixFQUFFQyxFQUFGLElBQVFFLEVBQUVDLEVBQUYsSUFBUUssQ0FBcEI7QUFDQUgsS0FBRUMsRUFBRixJQUFRUCxFQUFFQyxFQUFGLElBQVFFLEVBQUVDLEVBQUYsQ0FBUixJQUFpQk0sSUFBRVgsQ0FBRixHQUFNVSxDQUF2QixDQUFSO0FBQ0EsS0FBRVIsRUFBRixDQUFNLEVBQUVHLEVBQUYsQ0FBTSxFQUFFRyxFQUFGO0FBQ1o7O0FBRUQsU0FBTU4sS0FBS0MsRUFBWCxFQUFjO0FBQ2JPLE9BQUlDLENBQUo7QUFDQUEsT0FBSVYsRUFBRUMsRUFBRixJQUFRUSxDQUFaO0FBQ0FILEtBQUVDLEVBQUYsSUFBUVAsRUFBRUMsRUFBRixLQUFTUyxJQUFFWCxDQUFGLEdBQU1VLENBQWYsQ0FBUjtBQUNBLEtBQUVSLEVBQUYsQ0FBTSxFQUFFTSxFQUFGO0FBQ047O0FBRUQsTUFBR0csQ0FBSCxFQUFLO0FBQ0osVUFBTUgsS0FBS0MsRUFBWCxFQUFjO0FBQ2JGLE1BQUVDLEVBQUYsSUFBUVIsSUFBSSxDQUFaO0FBQ0EsTUFBRVEsRUFBRjtBQUNBO0FBQ0Q7QUFFRCxFQXhCRDtBQXlCQSIsImZpbGUiOiJzdWIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbi8qKlxuICogQHBhcmFtIHtpbnR9IHIgYmFzZSAocmFkaXgpXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBic3ViX3QgKHIpe1xuXG5cdC8qKlxuXHQgKiBTdWJ0cmFjdHMgdHdvIGJpZyBlbmRpYW4gYXJyYXlzLCBrID49IGkgPj0galxuXHQgKiB3cmFwc1xuXHQgKlxuXHQgKiBAcGFyYW0ge2FycmF5fSBhIGZpcnN0IG9wZXJhbmRcblx0ICogQHBhcmFtIHtpbnR9IGFpIGEgbGVmdFxuXHQgKiBAcGFyYW0ge2ludH0gYWogYSByaWdodFxuXHQgKiBAcGFyYW0ge2FycmF5fSBiIHNlY29uZCBvcGVyYW5kXG5cdCAqIEBwYXJhbSB7aW50fSBiaSBiIGxlZnRcblx0ICogQHBhcmFtIHtpbnR9IGJqIGIgcmlnaHRcblx0ICogQHBhcmFtIHthcnJheX0gYyByZXN1bHQsIG11c3QgYmUgMCBpbml0aWFsaXplZFxuXHQgKiBAcGFyYW0ge2ludH0gY2kgYyBsZWZ0XG5cdCAqIEBwYXJhbSB7aW50fSBjaiBjIHJpZ2h0XG5cdCAqL1xuXG5cdHJldHVybiBmdW5jdGlvbihhLCBhaSwgYWosIGIsIGJpLCBiaiwgYywgY2ksIGNqKXtcblx0XHR2YXIgVCwgQyA9IDA7XG5cblx0XHR3aGlsZSgtLWJqID49IGJpKXtcblx0XHRcdC0tYWo7IC0tY2o7XG5cdFx0XHRUID0gQztcblx0XHRcdEMgPSBhW2FqXSA8IGJbYmpdICsgVDtcblx0XHRcdGNbY2pdID0gYVthal0gLSBiW2JqXSArIChDKnIgLSBUKTtcblx0XHR9XG5cblx0XHR3aGlsZSgtLWFqID49IGFpKXtcblx0XHRcdC0tY2o7XG5cdFx0XHRUID0gQztcblx0XHRcdEMgPSBhW2FqXSA8IFQ7XG5cdFx0XHRjW2NqXSA9IGFbYWpdICsgKEMqciAtIFQpO1xuXHRcdH1cblxuXHRcdGlmKEMpe1xuXHRcdFx0d2hpbGUoLS1jaiA+PSBjaSl7XG5cdFx0XHRcdGNbY2pdID0gciAtIDE7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdH07XG59XG5cblxuLyoqXG4gKiBAcGFyYW0ge2ludH0gciBiYXNlIChyYWRpeClcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGxzdWJfdCAocil7XG5cblx0LyoqXG5cdCAqIFN1YnRyYWN0cyB0d28gbGl0dGxlIGVuZGlhbiBhcnJheXMsIGsgPj0gaSA+PSBqXG5cdCAqIHdyYXBzXG5cdCAqXG5cdCAqIEBwYXJhbSB7YXJyYXl9IGEgZmlyc3Qgb3BlcmFuZFxuXHQgKiBAcGFyYW0ge2ludH0gYWkgYSBsZWZ0XG5cdCAqIEBwYXJhbSB7aW50fSBhaiBhIHJpZ2h0XG5cdCAqIEBwYXJhbSB7YXJyYXl9IGIgc2Vjb25kIG9wZXJhbmRcblx0ICogQHBhcmFtIHtpbnR9IGJpIGIgbGVmdFxuXHQgKiBAcGFyYW0ge2ludH0gYmogYiByaWdodFxuXHQgKiBAcGFyYW0ge2FycmF5fSBjIHJlc3VsdCwgbXVzdCBiZSAwIGluaXRpYWxpemVkXG5cdCAqIEBwYXJhbSB7aW50fSBjaSBjIGxlZnRcblx0ICogQHBhcmFtIHtpbnR9IGNqIGMgcmlnaHRcblx0ICovXG5cblx0cmV0dXJuIGZ1bmN0aW9uKGEsIGFpLCBhaiwgYiwgYmksIGJqLCBjLCBjaSwgY2ope1xuXHRcdHZhciBULCBDID0gMDtcblxuXHRcdHdoaWxlKGJpIDwgYmope1xuXHRcdFx0VCA9IEM7XG5cdFx0XHRDID0gYVthaV0gPCBiW2JpXSArIFQ7XG5cdFx0XHRjW2NpXSA9IGFbYWldIC0gYltiaV0gKyAoQypyIC0gVCk7XG5cdFx0XHQrK2FpOyArK2JpOyArK2NpO1xuXHRcdH1cblxuXHRcdHdoaWxlKGFpIDwgYWope1xuXHRcdFx0VCA9IEM7XG5cdFx0XHRDID0gYVthaV0gPCBUO1xuXHRcdFx0Y1tjaV0gPSBhW2FpXSArIChDKnIgLSBUKTtcblx0XHRcdCsrYWk7ICsrY2k7XG5cdFx0fVxuXG5cdFx0aWYoQyl7XG5cdFx0XHR3aGlsZShjaSA8IGNqKXtcblx0XHRcdFx0Y1tjaV0gPSByIC0gMTtcblx0XHRcdFx0KytjaTtcblx0XHRcdH1cblx0XHR9XG5cblx0fTtcbn1cbiJdfQ==