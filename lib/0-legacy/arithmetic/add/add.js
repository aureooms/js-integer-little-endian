"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});

/**
 * @param {int} r base (radix)
 */

var badd_t = exports.badd_t = function badd_t(r) {

	/**
  * Adds two big endian arrays, k >= i >= j
  * wraps
  *
  * @param {array} a first operand
  * @param {int} i0 a left
  * @param {int} i1 a right
  * @param {array} b second operand
  * @param {int} j0 b left
  * @param {int} j1 b right
  * @param {array} c result, must be 0 initialized
  * @param {int} k0 c left
  * @param {int} k1 c right
  */

	return function (a, i0, i1, b, j0, j1, c, k0, k1) {
		var t,
		    C = 0;

		while (--j1 >= j0) {
			--i1;--k1;
			t = a[i1] + b[j1] + C;
			c[k1] = t % r;
			C = t / r >= 1;
		}

		while (--i1 >= i0) {
			--k1;
			t = a[i1] + C;
			c[k1] = t % r;
			C = t / r >= 1;
		}

		if (--k1 >= k0) {
			c[k1] = +C;
		}
	};
};

/**
 * @param {int} r base (radix)
 */

var ladd_t = exports.ladd_t = function ladd_t(r) {

	/**
  * Adds two little endian arrays, k >= i >= j
  * wraps
  *
  * @param {array} a first operand
  * @param {int} i0 a left
  * @param {int} i1 a right
  * @param {array} b second operand
  * @param {int} j0 b left
  * @param {int} j1 b right
  * @param {array} c result, must be 0 initialized
  * @param {int} k0 c left
  * @param {int} k1 c right
  */

	return function (a, i0, i1, b, j0, j1, c, k0, k1) {
		var t,
		    C = 0;

		while (j0 < j1) {
			t = a[i0] + b[j0] + C;
			c[k0] = t % r;
			C = t / r >= 1;
			++i0;++j0;++k0;
		}

		while (i0 < i1) {
			t = a[i0] + C;
			c[k0] = t % r;
			C = t / r >= 1;
			++i0;++k0;
		}

		if (k0 < k1) {
			c[k0] = +C;
		}
	};
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy8wLWxlZ2FjeS9hcml0aG1ldGljL2FkZC9hZGQuanMiXSwibmFtZXMiOlsiYmFkZF90IiwiciIsImEiLCJpMCIsImkxIiwiYiIsImowIiwiajEiLCJjIiwiazAiLCJrMSIsInQiLCJDIiwibGFkZF90Il0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFDQTs7OztBQUtPLElBQU1BLDBCQUFTLFNBQVNBLE1BQVQsQ0FBaUJDLENBQWpCLEVBQW9COztBQUd6Qzs7Ozs7Ozs7Ozs7Ozs7O0FBZUEsUUFBTyxVQUFTQyxDQUFULEVBQVlDLEVBQVosRUFBZ0JDLEVBQWhCLEVBQW9CQyxDQUFwQixFQUF1QkMsRUFBdkIsRUFBMkJDLEVBQTNCLEVBQStCQyxDQUEvQixFQUFrQ0MsRUFBbEMsRUFBc0NDLEVBQXRDLEVBQXlDO0FBQy9DLE1BQUlDLENBQUo7QUFBQSxNQUFPQyxJQUFJLENBQVg7O0FBRUEsU0FBTSxFQUFFTCxFQUFGLElBQVFELEVBQWQsRUFBaUI7QUFDaEIsS0FBRUYsRUFBRixDQUFNLEVBQUVNLEVBQUY7QUFDTkMsT0FBSVQsRUFBRUUsRUFBRixJQUFRQyxFQUFFRSxFQUFGLENBQVIsR0FBZ0JLLENBQXBCO0FBQ0FKLEtBQUVFLEVBQUYsSUFBUUMsSUFBSVYsQ0FBWjtBQUNBVyxPQUFJRCxJQUFJVixDQUFKLElBQVMsQ0FBYjtBQUNBOztBQUVELFNBQU0sRUFBRUcsRUFBRixJQUFRRCxFQUFkLEVBQWlCO0FBQ2hCLEtBQUVPLEVBQUY7QUFDQUMsT0FBSVQsRUFBRUUsRUFBRixJQUFRUSxDQUFaO0FBQ0FKLEtBQUVFLEVBQUYsSUFBUUMsSUFBSVYsQ0FBWjtBQUNBVyxPQUFJRCxJQUFJVixDQUFKLElBQVMsQ0FBYjtBQUNBOztBQUVELE1BQUcsRUFBRVMsRUFBRixJQUFRRCxFQUFYLEVBQWM7QUFDYkQsS0FBRUUsRUFBRixJQUFRLENBQUNFLENBQVQ7QUFDQTtBQUVELEVBckJEO0FBdUJBLENBekNNOztBQTRDUDs7OztBQUlPLElBQU1DLDBCQUFTLFNBQVRBLE1BQVMsQ0FBU1osQ0FBVCxFQUFXOztBQUVoQzs7Ozs7Ozs7Ozs7Ozs7O0FBZUEsUUFBTyxVQUFTQyxDQUFULEVBQVlDLEVBQVosRUFBZ0JDLEVBQWhCLEVBQW9CQyxDQUFwQixFQUF1QkMsRUFBdkIsRUFBMkJDLEVBQTNCLEVBQStCQyxDQUEvQixFQUFrQ0MsRUFBbEMsRUFBc0NDLEVBQXRDLEVBQXlDO0FBQy9DLE1BQUlDLENBQUo7QUFBQSxNQUFPQyxJQUFJLENBQVg7O0FBRUEsU0FBTU4sS0FBS0MsRUFBWCxFQUFjO0FBQ2JJLE9BQUlULEVBQUVDLEVBQUYsSUFBUUUsRUFBRUMsRUFBRixDQUFSLEdBQWdCTSxDQUFwQjtBQUNBSixLQUFFQyxFQUFGLElBQVFFLElBQUlWLENBQVo7QUFDQVcsT0FBSUQsSUFBSVYsQ0FBSixJQUFTLENBQWI7QUFDQSxLQUFFRSxFQUFGLENBQU0sRUFBRUcsRUFBRixDQUFNLEVBQUVHLEVBQUY7QUFDWjs7QUFFRCxTQUFNTixLQUFLQyxFQUFYLEVBQWM7QUFDYk8sT0FBSVQsRUFBRUMsRUFBRixJQUFRUyxDQUFaO0FBQ0FKLEtBQUVDLEVBQUYsSUFBUUUsSUFBSVYsQ0FBWjtBQUNBVyxPQUFJRCxJQUFJVixDQUFKLElBQVMsQ0FBYjtBQUNBLEtBQUVFLEVBQUYsQ0FBTSxFQUFFTSxFQUFGO0FBQ047O0FBRUQsTUFBR0EsS0FBS0MsRUFBUixFQUFXO0FBQ1ZGLEtBQUVDLEVBQUYsSUFBUSxDQUFDRyxDQUFUO0FBQ0E7QUFFRCxFQXJCRDtBQXNCQSxDQXZDTSIsImZpbGUiOiJhZGQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbi8qKlxuICogQHBhcmFtIHtpbnR9IHIgYmFzZSAocmFkaXgpXG4gKi9cblxuXG5leHBvcnQgY29uc3QgYmFkZF90ID0gZnVuY3Rpb24gYmFkZF90IChyKSB7XG5cblxuXHQvKipcblx0ICogQWRkcyB0d28gYmlnIGVuZGlhbiBhcnJheXMsIGsgPj0gaSA+PSBqXG5cdCAqIHdyYXBzXG5cdCAqXG5cdCAqIEBwYXJhbSB7YXJyYXl9IGEgZmlyc3Qgb3BlcmFuZFxuXHQgKiBAcGFyYW0ge2ludH0gaTAgYSBsZWZ0XG5cdCAqIEBwYXJhbSB7aW50fSBpMSBhIHJpZ2h0XG5cdCAqIEBwYXJhbSB7YXJyYXl9IGIgc2Vjb25kIG9wZXJhbmRcblx0ICogQHBhcmFtIHtpbnR9IGowIGIgbGVmdFxuXHQgKiBAcGFyYW0ge2ludH0gajEgYiByaWdodFxuXHQgKiBAcGFyYW0ge2FycmF5fSBjIHJlc3VsdCwgbXVzdCBiZSAwIGluaXRpYWxpemVkXG5cdCAqIEBwYXJhbSB7aW50fSBrMCBjIGxlZnRcblx0ICogQHBhcmFtIHtpbnR9IGsxIGMgcmlnaHRcblx0ICovXG5cblx0cmV0dXJuIGZ1bmN0aW9uKGEsIGkwLCBpMSwgYiwgajAsIGoxLCBjLCBrMCwgazEpe1xuXHRcdHZhciB0LCBDID0gMDtcblxuXHRcdHdoaWxlKC0tajEgPj0gajApe1xuXHRcdFx0LS1pMTsgLS1rMTtcblx0XHRcdHQgPSBhW2kxXSArIGJbajFdICsgQztcblx0XHRcdGNbazFdID0gdCAlIHI7XG5cdFx0XHRDID0gdCAvIHIgPj0gMTtcblx0XHR9XG5cblx0XHR3aGlsZSgtLWkxID49IGkwKXtcblx0XHRcdC0tazE7XG5cdFx0XHR0ID0gYVtpMV0gKyBDO1xuXHRcdFx0Y1trMV0gPSB0ICUgcjtcblx0XHRcdEMgPSB0IC8gciA+PSAxO1xuXHRcdH1cblxuXHRcdGlmKC0tazEgPj0gazApe1xuXHRcdFx0Y1trMV0gPSArQztcblx0XHR9XG5cblx0fTtcblxufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7aW50fSByIGJhc2UgKHJhZGl4KVxuICovXG5cbmV4cG9ydCBjb25zdCBsYWRkX3QgPSBmdW5jdGlvbihyKXtcblxuXHQvKipcblx0ICogQWRkcyB0d28gbGl0dGxlIGVuZGlhbiBhcnJheXMsIGsgPj0gaSA+PSBqXG5cdCAqIHdyYXBzXG5cdCAqXG5cdCAqIEBwYXJhbSB7YXJyYXl9IGEgZmlyc3Qgb3BlcmFuZFxuXHQgKiBAcGFyYW0ge2ludH0gaTAgYSBsZWZ0XG5cdCAqIEBwYXJhbSB7aW50fSBpMSBhIHJpZ2h0XG5cdCAqIEBwYXJhbSB7YXJyYXl9IGIgc2Vjb25kIG9wZXJhbmRcblx0ICogQHBhcmFtIHtpbnR9IGowIGIgbGVmdFxuXHQgKiBAcGFyYW0ge2ludH0gajEgYiByaWdodFxuXHQgKiBAcGFyYW0ge2FycmF5fSBjIHJlc3VsdCwgbXVzdCBiZSAwIGluaXRpYWxpemVkXG5cdCAqIEBwYXJhbSB7aW50fSBrMCBjIGxlZnRcblx0ICogQHBhcmFtIHtpbnR9IGsxIGMgcmlnaHRcblx0ICovXG5cblx0cmV0dXJuIGZ1bmN0aW9uKGEsIGkwLCBpMSwgYiwgajAsIGoxLCBjLCBrMCwgazEpe1xuXHRcdHZhciB0LCBDID0gMDtcblxuXHRcdHdoaWxlKGowIDwgajEpe1xuXHRcdFx0dCA9IGFbaTBdICsgYltqMF0gKyBDO1xuXHRcdFx0Y1trMF0gPSB0ICUgcjtcblx0XHRcdEMgPSB0IC8gciA+PSAxO1xuXHRcdFx0KytpMDsgKytqMDsgKytrMDtcblx0XHR9XG5cblx0XHR3aGlsZShpMCA8IGkxKXtcblx0XHRcdHQgPSBhW2kwXSArIEM7XG5cdFx0XHRjW2swXSA9IHQgJSByO1xuXHRcdFx0QyA9IHQgLyByID49IDE7XG5cdFx0XHQrK2kwOyArK2swO1xuXHRcdH1cblxuXHRcdGlmKGswIDwgazEpe1xuXHRcdFx0Y1trMF0gPSArQztcblx0XHR9XG5cblx0fTtcbn07XG4iXX0=